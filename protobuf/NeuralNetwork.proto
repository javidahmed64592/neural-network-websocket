syntax = "proto3";
option optimize_for = LITE_RUNTIME;
package NeuralNetwork;

enum ActivationFunctionData {
    LINEAR = 0;
    RELU = 1;
    SIGMOID = 2;
    TANH = 3;
}

message MatrixData {
    repeated float data = 1;
    int32 rows = 2;
    int32 cols = 3;
}

message SGDOptimizerData {
    float learning_rate = 1;
}

message AdamOptimizerData {
    float learning_rate = 1;
    float beta1 = 2;
    float beta2 = 3;
    float epsilon = 4;
}

enum LearningRateMethod {
    STEP_DECAY = 0;
    EXPONENTIAL_DECAY = 1;
}

message LearningRateSchedulerData {
    float decay_rate = 1;
    int32 decay_steps = 2;
    LearningRateMethod method = 3;
}

message OptimizerData {
    oneof algorithm {
        SGDOptimizerData sgd = 1;
        AdamOptimizerData adam = 2;
    }
    LearningRateSchedulerData learning_rate_scheduler = 3;
}

message NeuralNetworkData {
    int32 num_inputs = 1;
    repeated int32 hidden_layer_sizes = 2;
    int32 num_outputs = 3;
    ActivationFunctionData input_activation = 4;
    optional ActivationFunctionData hidden_activation = 5;
    ActivationFunctionData output_activation = 6;
    repeated MatrixData weights = 7;
    repeated MatrixData biases = 8;
    optional OptimizerData optimizer = 9;
}
